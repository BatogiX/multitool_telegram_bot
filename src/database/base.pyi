from abc import ABC, abstractmethod
from typing import Optional, Any, Union, Coroutine, overload, ClassVar

from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import BaseStorage, StorageKey

from config import bot_cfg
from models.actions import BaseAction, SetDataAction, GetFromDataAction
from models.kv.base import BaseKeyValueSet, BaseKeyValueGet
from helpers.pwd_mgr_helper import EncryptedRecord


class AbstractDatabase(ABC):
    async def connect(self) -> None: ...
    async def close(self) -> None: ...


class AbstractKeyValueDatabase(AbstractDatabase):
    storage: BaseStorage
    state_ttl: ClassVar[Optional[int]]
    data_ttl: ClassVar[Optional[int]]

    @abstractmethod
    async def _set(self, obj: BaseKeyValueSet) -> None: ...
    @abstractmethod
    async def _get(self, obj: BaseKeyValueGet) -> Optional[Any]: ...
    @abstractmethod
    async def _delete(self, obj: BaseKeyValueGet): ...
    @overload
    @abstractmethod
    async def execute_batch[T1](self, coro1: Coroutine[Any, Any, T1]) -> tuple[T1]: ...
    @overload
    async def execute_batch[T1, T2](
            self, coro1: Coroutine[Any, Any, T1], coro2: Coroutine[Any, Any, T2]
    ) -> tuple[T1, T2]: ...
    @overload
    async def execute_batch[T1, T2, T3](
            self,
            coro1: Coroutine[Any, Any, T1],
            coro2: Coroutine[Any, Any, T2],
            coro3: Coroutine[Any, Any, T3]
    ) -> tuple[T1, T2, T3]: ...
    @overload
    async def execute_batch[T1, T2, T3, T4](
            self,
            coro1: Coroutine[Any, Any, T1],
            coro2: Coroutine[Any, Any, T2],
            coro3: Coroutine[Any, Any, T3],
            coro4: Coroutine[Any, Any, T4]
    ) -> tuple[T1, T2, T3, T4]: ...
    @overload
    async def execute_batch[T1, T2, T3, T4, T5](
            self,
            coro1: Coroutine[Any, Any, T1],
            coro2: Coroutine[Any, Any, T2],
            coro3: Coroutine[Any, Any, T3],
            coro4: Coroutine[Any, Any, T4],
            coro5: Coroutine[Any, Any, T5]
    ) -> tuple[T1, T2, T3, T4, T5]: ...
    @overload
    async def execute_batch[T1, T2, T3, T4, T5, T6](
            self,
            coro1: Coroutine[Any, Any, T1],
            coro2: Coroutine[Any, Any, T2],
            coro3: Coroutine[Any, Any, T3],
            coro4: Coroutine[Any, Any, T4],
            coro5: Coroutine[Any, Any, T5],
            coro6: Coroutine[Any, Any, T6]
    ) -> tuple[T1, T2, T3, T4, T5, T6]: ...
    @overload
    async def execute_batch[T](self, *coros: Coroutine[Any, Any, T]) -> tuple[T]: ...
    async def set_state(
        self, state_value: str, state: FSMContext, expire: Optional[int] = state_ttl
    ) -> None: ...
    async def set_message_id_to_delete(
        self, msg_id: int, state: FSMContext, expire: Optional[int] = data_ttl
    ) -> None: ...
    async def set_service(
        self, service_name: str, state: FSMContext, expire: Optional[int] = data_ttl
    ) -> None: ...
    async def set_hash_type(
        self, hash_type: str, state: FSMContext, expire: Optional[int] = data_ttl
    ) -> None: ...
    async def set_input_format_text(
        self, text: str, state: FSMContext, expire: Optional[int] = data_ttl
    ) -> None: ...
    async def set_pwds_offset(
        self, offset: int, state: FSMContext, expire: Optional[int] = data_ttl
    ) -> None: ...
    async def set_services_offset(
        self, offset: int, state: FSMContext, expire: Optional[int] = data_ttl
    ) -> None: ...
    async def set_cache_user_created(
        self, state: FSMContext, expire: Optional[int] = 86400
    ) -> None: ...
    async def get_state(self, state: FSMContext) -> Optional[str]: ...
    async def get_message_id_to_delete(self, state: FSMContext) -> Union[int]: ...
    async def get_service(self, state: FSMContext) -> str: ...
    async def get_hash_type(self, state: FSMContext) -> str: ...
    async def get_input_format_text(self, state: FSMContext) -> str: ...
    async def get_pwds_offset(self, state: FSMContext) -> int: ...
    async def get_services_offset(self, state: FSMContext) -> int: ...
    async def get_cache_user_created(self, state: FSMContext) -> Optional[str]: ...
    async def clear_state(self, state: FSMContext) -> None: ...
    async def _get_data(self, obj: Union[BaseKeyValueSet, BaseKeyValueGet]) -> dict: ...
    async def _set_data(self, obj: BaseKeyValueSet) -> None: ...
    async def _get_from_data(self, obj: BaseKeyValueGet) -> Optional[Any]: ...
    def _parse_coroutine(self, coro: Coroutine) -> BaseAction: ...
    @staticmethod
    def _parse_args(coro: Coroutine) -> tuple[FSMContext, Optional[str | int], Optional[int]]: ...
    def _method_to_action_map(self) -> dict[str, type[BaseAction]]: ...
    def _parse_names(
        self, coro: Coroutine
    ) -> tuple[str, type[Union[BaseKeyValueSet, BaseKeyValueGet]]]: ...
    async def _handle_storage_data(
        self,
        data: list[Optional[str]],
        actions: list[Union[SetDataAction, GetFromDataAction]],
        storage_key: StorageKey
    ) -> tuple[Any, ...]: ...


class AbstractRelationDatabase(AbstractDatabase):
    @abstractmethod
    async def create_user_if_not_exists(
        self, user_id: int, user_name: str, full_name: str, state: FSMContext
    ) -> None: ...
    @abstractmethod
    async def get_services(
        self, user_id: int, offset: int, limit: int = bot_cfg.dynamic_buttons_limit
    ) -> Optional[list[str]]: ...
    @abstractmethod
    async def create_password(self, user_id: int, service: str, ciphertext: str) -> None: ...
    @abstractmethod
    async def get_passwords(
        self, user_id: int, service: str, offset: int, limit: int = bot_cfg.dynamic_buttons_limit
    ) -> list[EncryptedRecord]: ...
    @abstractmethod
    async def get_rand_password(self, user_id: int) -> Optional[EncryptedRecord]: ...
    @abstractmethod
    async def change_service(self, new_service: str, user_id: int, old_service: str) -> None: ...
    @abstractmethod
    async def delete_services(self, user_id: int) -> None: ...
    @abstractmethod
    async def delete_service(self, user_id: int, service: str) -> None: ...
    @abstractmethod
    async def delete_password(self, user_id: int, service: str, ciphertext: str) -> None: ...
    @abstractmethod
    async def update_credentials(
        self, user_id: int, service: str, current_ciphertext: str, new_ciphertext: str
    ) -> None: ...
    @abstractmethod
    async def import_passwords(
        self, user_id: int, encrypted_records: list[EncryptedRecord]
    ) -> None: ...
    @abstractmethod
    async def export_passwords(self, user_id: int) -> list[EncryptedRecord]: ...
    @abstractmethod
    async def inline_search_service(
        self, user_id: int, service: str, limit: int = bot_cfg.dynamic_buttons_limit
    ) -> Optional[list[str]]: ...
    @abstractmethod
    async def get_salt(self, user_id: int) -> bytes: ...
    @abstractmethod
    async def _execute(self, query: str, *args) -> None: ...
    @abstractmethod
    async def _fetch_row(self, query: str, *args) -> Any: ...
    @abstractmethod
    async def _fetch_value(self, query: str, *args) -> Any: ...
    @abstractmethod
    async def _fetch_all(self, query: str, *args) -> Any: ...
    @abstractmethod
    async def _init_db(self) -> None: ...
